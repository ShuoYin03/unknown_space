<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on UNKNOWN SPACE</title>
    <link>https://shuoyin03.github.io/categories/notes/</link>
    <description>Recent content in notes on UNKNOWN SPACE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://shuoyin03.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Natural Language Processing - Text Pre-processing</title>
      <link>https://shuoyin03.github.io/2023/12/20/nlp-representation/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shuoyin03.github.io/2023/12/20/nlp-representation/</guid>
      <description>In this article, we are going to look at general steps of text pre-processing. Text Pre-processing Tokenisation Word-Based Tokenisation Tokenisation is the first step of text pre-processing, it is to split a bunch of text into a list of tokens. As an example, we could split “a cat on a pat” to [“a”, “cat”, “on</description>
    </item>
    
    <item>
      <title>Advanced Distributed System - Fault Tolerance</title>
      <link>https://shuoyin03.github.io/2023/12/15/distributed-system-fault-tolerance/</link>
      <pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shuoyin03.github.io/2023/12/15/distributed-system-fault-tolerance/</guid>
      <description>In a distributed application, we always have to consider the impact of faults and solutions of how we can solve it while balancing the cost, response time and other performances.
Type of Failures First of all, let’s have a look at what type of faults do have.
Omission failures
The server fails to respond/receive to incoming requests and fail to send messages Timing failures
The server fails to respond within a certain time Response failures</description>
    </item>
    
    <item>
      <title>Advanced Distributed System - Performance Modelling</title>
      <link>https://shuoyin03.github.io/2023/12/13/distributed-system-performance-modelling/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shuoyin03.github.io/2023/12/13/distributed-system-performance-modelling/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;It is always good to test the performance of distributed applications to ensure it meets the target, and today we&amp;rsquo;ll learn what is a model and how to build a model to achieve this.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Algorithm and Data Structure - Propositional logic</title>
      <link>https://shuoyin03.github.io/post/comp36111-algorithm/2023-11-13-algorithm-and-data-structure-logic/</link>
      <pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shuoyin03.github.io/post/comp36111-algorithm/2023-11-13-algorithm-and-data-structure-logic/</guid>
      <description>Propositional Logic Satisfiability Definitions We call $P = \lbrace p_1, p_2, &amp;hellip; \rbrace $ as propositional letters. Every element in $P$ is a formula. If $\psi_1$ and $\psi_2$ are formulas, then the following equations are formulas, too. $$(¬\psi_1), (\psi_1 ∨ \psi_2), (\psi_1 ∧ \psi_2), (\psi_1 → \psi_2)$$
An assignment is a function $\theta: P → \lbrace T, F\rbrace$, for example: In a simple way, an assignment is like a machine running a logic equation and excute a result.</description>
    </item>
    
    <item>
      <title>Algorithm and Data Structure - Time, Space and Determinism</title>
      <link>https://shuoyin03.github.io/post/comp36111-algorithm/2023-11-27-algorithm-and-data-structure-time-space/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shuoyin03.github.io/post/comp36111-algorithm/2023-11-27-algorithm-and-data-structure-time-space/</guid>
      <description>1. Introduction to Time and Space Definitions Consider there is a turing machine M with alphabet Σ, and g is a function N → N, we say M runs in time g and runs in space g with at most g(|x|) steps and g(|x|) squares with a finite x many Strings. If there is a language L over some alphabet, we say L runs in Time(g) and Space(g) such that there is a deterministic turing machine M recognizing L runs in time and space g.</description>
    </item>
    
    <item>
      <title>Advanced Distributed System - Big data</title>
      <link>https://shuoyin03.github.io/2023/11/06/distributed-system-big-data/</link>
      <pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shuoyin03.github.io/2023/11/06/distributed-system-big-data/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In a shared nothing infrastructure, data storage, update, access and processing takes place across a collection of networked machines. To enhance the performance, processing needs to be take place in parallel, which we have to distribute data, and that&amp;rsquo;s partition. This article will gives an rough idea of partition techniques and details needs to be consider.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Algorithm and Data Structure - Turing Machine</title>
      <link>https://shuoyin03.github.io/2023/11/06/algorithm-and-data-structure-turing-machine/</link>
      <pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shuoyin03.github.io/2023/11/06/algorithm-and-data-structure-turing-machine/</guid>
      <description>In this article, we are going to look at the formal definition of Turing Machine and the therom with it.
Introduction of turing machine The picture below is a multi-tape turing machine Definition In a formal definition, a turing machine could be define as a quintuple:
M = [ K, Σ, Q, q0, T ]
K ≥ 2 (number of tapes) Σ is a non-empty, finite set (alphabet) Q is a non-empty, finite set (set of states) q0 ∈ Q (initial state) T is a set of transitions (for K, Σ and Q) Symbol A symbol is an element of which means blank and start separately.</description>
    </item>
    
  </channel>
</rss>
